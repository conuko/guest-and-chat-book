// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Account, Session and VerificationToken are necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  address                  UserAddress?              @relation("UserHasAdress")
  accounts                 Account[]
  sessions                 Session[]
  posts                    Post[]
  likes                    Like[]
  comments                 Comment[]
  stripeCustomerId         String? // link to Stripe customer object in Stripe's system
  stripeSubscriptionId     String? // link to Stripe subscription object for user in Stripe's system
  stripeSubscriptionStatus StripeSubscriptionStatus? // status of user's subscription to determine access to services
}

model UserAddress {
  id      String  @id @default(cuid())
  street  String?
  city    String?
  zip     String?
  country String?
  phone   String?
  user    User    @relation("UserHasAdress", fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique([userId])
}

model Post {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  message   String    @db.VarChar(100)
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  likes     Like[]
  comments  Comment[]

  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // This is a unique composite index, which means that a user can only like a post once
  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String   @db.VarChar(100)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([postId])
  @@index([userId])
}

// StripeSubscriptionStatus and StripeEvent are necessary for Stripe:
// https://stripe.com/docs/api/subscriptions/object#subscription_object-status
enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}
